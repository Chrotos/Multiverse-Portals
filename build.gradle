plugins {
    id 'java-library'
    id 'maven-publish'
    id 'checkstyle'
    id 'io.github.goooler.shadow' version '8.1.7'
    id "xyz.jpenilla.run-paper" version "2.0.1"
}

version = System.getenv('GITHUB_VERSION') ?: 'local'
group = 'com.onarandombox.multiverseportals'
description = 'Multiverse-Portals'

repositories {
    mavenLocal()
    mavenCentral()

    maven {
        name = 'papermc'
        url = uri("https://papermc.io/repo/repository/maven-public/")
    }

    maven {
        name = 'onarandombox'
        url = uri('https://repo.onarandombox.com/content/groups/public')
    }

    maven {
        name = 'enginehub'
        url = uri('https://maven.enginehub.org/repo/')
    }
}

dependencies {
    // Paper
    implementation 'io.papermc.paper:paper-api:1.20.6-R0.1-SNAPSHOT'

    // Core
    implementation 'com.onarandombox.multiversecore:Multiverse-Core:4.3.1'

    //WorldEdit
    implementation('com.sk89q.worldedit:worldedit-bukkit:7.2.9') {
        exclude group: 'org.bukkit', module: 'bukkit'
    }

    // Utils
    api('com.dumptruckman.minecraft:Logging:1.1.1') {
        exclude group: 'org.bukkit', module: 'bukkit'
    }
}


java {
    withSourcesJar()
    withJavadocJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release.set(21)
}

tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
}

tasks {
    runServer {
        minecraftVersion("1.20.6")
    }
}


configurations {
    [apiElements, runtimeElements].each {
        it.outgoing.artifacts.removeIf { it.buildDependencies.getDependencies(null).contains(jar) }
        it.outgoing.artifact(shadowJar)
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/Multiverse/Multiverse-Portals"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}


processResources {
    def props = [version: "${project.version}"]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }

    // This task should never be skipped. The tests depend on this having been run but we want the new version number
    // that is created after tests are run and before we run again to publish.
    outputs.upToDateWhen { false }
}


checkstyle {
    toolVersion = '10.12.4'
    configFile file('config/mv_checks.xml')
    ignoreFailures = true
}


javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compileClasspath
}


project.configurations.api.canBeResolved = true

shadowJar {
    relocate 'com.dumptruckman.minecraft.util.Logging', 'com.onarandombox.multiverseportals.util.MVPLogging'
    relocate 'com.dumptruckman.minecraft.util.DebugLog', 'com.onarandombox.multiverseportals.util.DebugFileLogger'

    configurations = [project.configurations.api]

    def baseName = archiveBaseName.get()
    def extension = archiveExtension.get()
    archiveFileName = "$baseName-$version.$extension"
}

build.dependsOn shadowJar
jar.enabled = false
